rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authorized
    function isAuthorized() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
        get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.approved == true;
    }
    
    // Helper function to check if user is admin (backwards compatibility)
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
        get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.admin == true;
    }
    
    // Helper function to check if user is superadmin
    function isSuperAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
        get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.role == 'superadmin';
    }
    
    // Helper function to check app-specific write permission
    function canWriteApp(app) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
        (
          isSuperAdmin() ||
          isAdmin() ||
          get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.permissions[app].write == true
        );
    }
    
    // Helper function to check app-specific delete permission
    function canDeleteApp(app) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
        (
          isSuperAdmin() ||
          isAdmin() ||
          get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.permissions[app]['delete'] == true
        );
    }
    
    // Authorized users collection
    match /authorized_users/{email} {
      // Users can read their own status, or all if they're authorized (for admin panel)
      allow read: if request.auth != null && (
        request.auth.token.email == email || 
        isAuthorized()
      );
      // Authorized users can write (for admin panel)
      allow write: if isAuthorized();
    }
    
    // Recepten collection
    match /recepten/{recipeId} {
      // Everyone can read published recipes
      allow read: if resource.data.status == 'published' || 
                     isSuperAdmin() || 
                     isAdmin() ||
                     canWriteApp('recipes');
      
      // Only authorized users can create recipes
      allow create: if isSuperAdmin() || 
                       isAdmin() ||
                       canWriteApp('recipes');
      
      // Only authorized users can update recipes
      allow update: if isSuperAdmin() || 
                       isAdmin() ||
                       canWriteApp('recipes');
      
      // Only superadmin or users with delete permission can delete
      allow delete: if isSuperAdmin() || 
                       isAdmin() ||
                       canDeleteApp('recipes');
    }
    
    // Taxonomies collection (read-only for everyone, write for admins)
    match /taxonomies/{taxonomyId} {
      allow read: if true; // Public read
      allow write: if isSuperAdmin() || isAdmin();
    }
    
    // Items collection - example protected collection
    match /items/{itemId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isAuthorized();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
